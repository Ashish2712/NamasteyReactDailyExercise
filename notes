Bundler - codes needs to be minified, cleaned
webpack,babel, parcel, weed - all these are bundlers, it bundles our app and ship it to the production.

types of dependencies
1. Dev - required only while developing the product
2. Normal - required normally, during production

^2.11.0 -> carrot sign is used to auto upgrade the version of the module
~2.11.0 -> It will install the major version of the module automatically

so putting carrot sign helps you not to auto upgrade to major version.

transitive dependencies -> one module is dependent on other modules is termed as transitive dependency.

npm - calling the command of npm, which is a package manager
npx - to execute the package
how does a package is executed ?
Ex: npx parcel index.html -> here parcel ignite the app by running server on localhost

cdn links is not a good way to bring react in your project, as it requires network call to the cdn network
and bring the react to your project, instead of having react as modules in your local system is a prefered way.

browser scripts cannot have imports or exports -> put type="module" inside script tag in index.html

Main  in package.json is responsible for entrypoint in the app.

when you run npx parcel index.html
parcel creates the file inside dist folder now everytime when you save parcel get's the file
from .parcel-cahce using HMR(Hot module replacement)

npx parcel build index.html -> command to build production build


JSX -> Javascript syntax to create react elemenet
----------------------------------
Creating food delivery app - first design the wireframe/Mock plan things what needs to
be present on the page

to dynamically data to a component will pass using props
config driven UI -> UI is driven by config(ex: based on the location UI will change)

why we need unique keys in react
to optimise the re-rendering of react, react needs to uniquely identify them using the key

using index as Id is not recommended way, but best practice is to use a unique id.

named export comes handy when you want to install mutiple things from a file
ex: export CDN_URL
import {CDN_URL} from "path to the CDN_URL"

whenever a state variable updates, react will re-render the component

ReactDom Package enables:
1. render() - This method renders one or more components.
2. findDOMNode() - This method retreives tge DOM node where a specific react component is rendered.
3. unmountComponentAtNode() - This method removes or unmount a specific React component
4. hydrate() - This method is similar to render() method. However, it enables server-side rendering.
5. createPortal() - This method renders the component into a DOM node that sits outside the current DOM.

Virtual DOM vs Shadow DOM

   Virtual DOM                                                                                 Shadow DOM
1. Used for solving performance issues                             1.Used for encapsulating and isolating elements
2. This technology uses JS libs such as React.js and Vue.js        2. The web browser itself implements this tech
3. It creates a copy of entire DOM in the memory                   3. It doesn't create the complete representation of the      
                                                                   entire DOM. it adds subtrees of DOM elements into the    
                                                                   document instead of adding them to the main DOM tree.
4. It doesn't implement CSS scoping since it creates a copy of     4. This tech creates separate sub trees of the DOM   
 DOM                                                                   elements and, therefore facilitates their isolation and enables CSS scoping

 So Virtual DOM and shadow DOM are different and serves the different purpose, if there is a usecase where isolation is 
 prefered then use shadow DOM. However for solving performance issues it's better to use virtual DOM.



Mounting cycle of react components
1. Constructor is called -> render() -> componentDidMount() is called
https://www.valentinog.com/blog/await-react/

By using the super constructor with a props argument, the component is able to inherit the properties of the parent component and also access the new props that have been passed in. This allows the component to make use of the properties of both the parent component and the new props in its render method.
https://dev.to/codeofrelevancy/what-is-the-purpose-of-using-super-constructor-with-props-argument-in-react-2ea3#:~:text=By%20using%20the%20super%20constructor,props%20in%20its%20render%20method.


This is because the useEffect hook expects its effect function to return either a cleanup function or nothing at all. This is due to the useEffect() hook's callback function's asynchronous execution and lack of blocking.
https://dev.to/sanjampreetsingh/why-async-callback-cannot-happen-in-react-useeffect-hook-ff#:~:text=This%20is%20because%20the%20useEffect,execution%20and%20lack%20of%20blocking.


Single responsibility principle:
1. Code becomes more maintainible
2. Testable
3. Reusable

Optimising React code: 
Ref: https://www.codementor.io/blog/react-optimization-5wiwjnf9hj
1. Using Immutable Data Structures
2. Function/Stateless Components and React.PureComponent
3. Multiple Chunk Files
4. Using Production Mode Flag in Webpack
5. Dependency optimization
6. Use React.Fragments to Avoid Additional HTML Element Wrappers
7. Avoid Inline Function Definition in the Render Function.
8. Throttling and Debouncing Event Action in JavaScript
9. Avoid using Index as Key for map
10. Avoiding Props in Initial States
11. Spreading props on DOM elements
12. Use Reselect in Redux to Avoid Frequent Re-render
13. Avoid Async Initialization in componentWillMount()
14. Memoize React Components
15. CSS Animations Instead of JS Animations
16. Using a CDN
17. Using Web Workers for CPU Extensive Tasks
18. Virtualize Long Lists
19. Analyzing and Optimizing Your Webpack Bundle Bloat
20. Consider Server-side Rendering
21. Enable Gzip Compression on Web Server
                                                                                                                            
